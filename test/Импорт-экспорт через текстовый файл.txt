#include "stdafx.h"
#include "resource.h"
#include "DynPropertiesManager.hpp"

#include <fstream>
#include <sstream>
#include <string>
//#include <codecvt>

//#include <tinyxml2.h>
//namespace xml = tinyxml2;

#include "aux_functions.h"
//#define _SILENCE_EXPERIMENTAL_FILESYSTEM_DEPRECATION_WARNING
//#include <experimental/filesystem>
//namespace fs = std::experimental::filesystem;
//static const std::locale ru_loc = std::locale("ru_RU.UTF-8");
//static const std::locale en_loc = std::locale("en_US.UTF-8");
//static void get_type(VARENUM* type, std::string str)
//{
//    if (str == "string") *type = VARENUM::VT_BSTR;
//    else if (str == "double") *type = VARENUM::VT_R8;
//    //else if (prop_type == L"bool") type = VARENUM::VT_BOOL;
//    //else if (prop_type == L"datetime") type = VARENUM::VT_DATE;
//    else if (str == "int") *type = VARENUM::VT_I4;
//    //else if (prop_type == L"long") type = VARENUM::VT_UI4;
//}
void DynPropertiesManager::ImportPropertiesByFile() {
	ACHAR file_path[512];
	int ret;
	ret = acedGetString(1, L"\nУкажите абсолютный файловый путь: ", file_path);
    std::string s_file_path = aux_functions::ToStringFromWString(file_path, ru_loc);
	if (ret == RTNORM)
	{
        auto lines = aux_functions::ReadFileByPath(s_file_path.c_str());
        for (auto line : lines)
        {
            std::vector<std::string> str_data;
            int last_pos = 0;
            for (int i = 0; i < line.size(); i++)
            {
                if (line[i] == ',')
                {
                    std::string part = line.substr(last_pos, i - last_pos);
                    //BSTR bstr_str = aux_functions::ToBSTRFromString(part);
                    str_data.push_back(part);
                    //delete[] cstr;
                    last_pos = i + 1;
                }
            }
            std::string part = line.substr(last_pos);
            //BSTR bstr_str2 = aux_functions::ToBSTRFromString(part);
            str_data.push_back(part);
            //char* cstr = strcpy(new char[part.length() + 1], part.c_str());

            auto prop_type = str_data[2];
            VARENUM type = VARENUM::VT_UNKNOWN;
            if (prop_type == "string") type = VARENUM::VT_BSTR;
            else if (prop_type == "double") type = VARENUM::VT_R8;
            else if (prop_type == "int") type = VARENUM::VT_I4;

            //CComBSTR prop_guid(str_data[4]);
            std::vector<BSTR> classes;
            if (!str_data[5].empty())
            {
                auto splited_data = aux_functions::StringSplit(str_data[5], ';');
                for (auto i : splited_data) { classes.push_back(aux_functions::ToBSTRFromString(i)); }
            }

            //GUID created_id;
            //CreateSingleDynProperty(prop_name, prop_desc, type, prop_cat_name);
            CreateSingleDynProperty(
                aux_functions::ToBSTRFromString(str_data[0]),
                aux_functions::ToBSTRFromString(str_data[1]),
                type,
                aux_functions::ToBSTRFromString(str_data[3]),
                classes,
                aux_functions::ToBSTRFromString(str_data[4]));
        }

	}
}
void DynPropertiesManager::WritePropsToConsole()
{
}
//////////////////////////////////////////////////////////////////////////////////////
/*Для загрузки свойств из файла*/
//////////////////////////////////////////////////////////////////////////////////////
const char* xml_file_root_name = "psets_info";
const char* xml_file_metadata_name = "metadata";
const char* xml_file_project_info_name = "project_info";
const char* xml_file_properties_info_name = "properties_info";
const char* xml_file_properties_values_name = "properties_values";

void DynPropertiesManager::LoadPropertiesAndValuesFromFile() 
{
    /*TODO: сделать preload с просмотром metadata в форме
    в рамках загрузчика таких файлов из Истории (папки ncad_psets)*/
    SetConsoleCP(1251);// установка кодовой страницы win-cp 1251 в поток ввода
    SetConsoleOutputCP(1251); // установка кодовой страницы win-cp 1251 в поток вывода
    setlocale(LC_ALL, "Rus"); // Подключение русского языка

    ACHAR file_path[512];
    int ret;
    ret = acedGetString(1, L"\nУкажите абсолютный файловый путь до файла конфигурации: ", file_path);
    std::string s_file_path = aux_functions::ToStringFromWString(file_path, ru_loc);

    /*0 = metadata; 1 = properties_info; 2 = properties_values*/
    std::vector<std::vector<std::string>> file_info;
    std::string line_row;
    std::ifstream file_data(file_path);
    int counter_blocks = 0;

    if (file_data.is_open())
    {
        std::vector<std::string> lines;
        while (getline(file_data, line_row))
        {
            if (line_row.substr(0, 2) == "**")
            {
                if (counter_blocks != 0)
                {
                    file_info.push_back(lines);
                    lines.clear();
                }
                counter_blocks++;

                if (line_row.substr(0, 5) == "**end") break;
            }
            else {
                lines.push_back(line_row);
            }
        }
    }
    file_data.close();

    AcDbDatabase* pCurDb = acDocManager->curDocument()->database();
    std::map<std::string, AcDbObjectId> current_data = aux_functions::GetDrawingHandles(pCurDb);
    std::map<std::string, VARTYPE> props2types;

    /*metadata*/
    for (auto one_metadata : file_info[0])
    {
        
    }

    /*properties_info*/
    for (auto one_property_def : file_info[1])
    {
        /*Для одного свойства*/
        auto prop_data = aux_functions::StringSplit(one_property_def, ';');

        auto prop_name = aux_functions::StringSplit(prop_data[0], '=');
        auto prop_description = aux_functions::StringSplit(prop_data[1], '=');
        auto prop_type = aux_functions::StringSplit(prop_data[2], '=');
        auto prop_category = aux_functions::StringSplit(prop_data[3], '=');
        auto prop_id = aux_functions::StringSplit(prop_data[4], '=');
        auto prop_to_classes = aux_functions::StringSplit(prop_data[5], '=');

        BSTR name = aux_functions::ToBSTRFromString(prop_name[1]);
        auto description = aux_functions::ToBSTRFromString(prop_description[1]);
        //std::string s_type = child->FindAttribute("type")->Value();
        VARENUM type = VARENUM::VT_UNKNOWN;
        if (prop_type[1] == "8") type = VARENUM::VT_BSTR;
        else if (prop_type[1] == "5") type = VARENUM::VT_R8;
        else if (prop_type[1] == "3") type = VARENUM::VT_I4;

        auto category = aux_functions::ToBSTRFromString(prop_category[1]);

        //std::string data_guid = child->FindAttribute("id")->Value();
        auto w_data_guid = aux_functions::ToWStringFromString(prop_id[1]);
        GUID represented_guid;
        HRESULT hr2 = CLSIDFromString(w_data_guid.c_str(), (LPCLSID)&represented_guid);

        if (hr2 == S_OK)
        {
            std::string current_guid = aux_functions::ToStringFromGuid(represented_guid);
            auto id = aux_functions::ToBSTRFromString(current_guid);

            /*classes*/
            //std::string to_classes_data = child->FindAttribute("to_classes")->Value();
            std::vector<BSTR> classes;
            if (!prop_to_classes[1].empty())
            {
                auto splited_data = aux_functions::StringSplit(prop_to_classes[1], ';');
                for (auto i : splited_data) { classes.push_back(aux_functions::ToBSTRFromString(i)); }
            }
            props2types.insert({ current_guid, type });
            CreateSingleDynProperty(name, description, type, category, classes, id);
        }
    }

    /*properties_values*/

    /*read strings and insert to temporal containers*/
    int counter_handles = 0;
    std::map<std::string, std::map<std::string, std::string>> objects_property_values;
    std::string handle_str;
    std::map<std::string, std::string> to_one_object;

    for (auto one_object_data : file_info[2])
    {
        if (one_object_data.substr(0, 1) == "*")
        {
            auto handle_info = aux_functions::StringSplit(one_object_data, '=');
            if (counter_handles != 0)
            {
                objects_property_values.insert(std::make_pair(handle_str, to_one_object));
                to_one_object.clear();
            }
            handle_str = handle_info[1];
            counter_blocks++;
        }
        else {
            auto value_info = aux_functions::StringSplit(one_object_data, ';');

            auto id = aux_functions::StringSplit(value_info[0], '=');
            auto value = aux_functions::StringSplit(value_info[1], '=');
            to_one_object.insert(std::make_pair(id[1], value[1]));
        }
    }
    objects_property_values.insert(std::make_pair(handle_str, to_one_object));
    to_one_object.clear();

    for (auto one_object_data : objects_property_values)
    {
        /*Для одного объекта*/
        //std::string s_handle = child->FindAttribute("handle")->Value();
        auto w_handle = aux_functions::ToWStringFromString(one_object_data.first);
        AcDbObjectId drawing_object_id = AcDbObjectId::kNull;
        try
        {

            AcDbHandle drawing_handle(w_handle.c_str());
            if (pCurDb->getAcDbObjectId(drawing_object_id, false, drawing_handle) == Acad::eOk)
            {
                drawing_object_id = current_data[one_object_data.first];
            }
        }
        catch (int err) {}

        if (!drawing_object_id.isNull())
        {
            for (auto prop_value_info : one_object_data.second)
            {
                auto s_value = prop_value_info.second.c_str();

                std::string data_guid = prop_value_info.first;
                //data_guid = data_guid.replace(data_guid.find("{"), 1, "");
                //data_guid = data_guid.replace(data_guid.find("}"), 1, "");

                auto w_data_guid = aux_functions::ToWStringFromString(data_guid);
                GUID represented_guid;
                HRESULT hr2 = CLSIDFromString(w_data_guid.c_str(), (LPCLSID)&represented_guid);
                if (hr2 == S_OK)
                {
                    std::string current_guid = aux_functions::ToStringFromGuid(represented_guid);
                    VARTYPE prop_type = props2types[current_guid];

                    VARIANT current_v = _variant_t();
                    switch (prop_type)
                    {
                    case VARENUM::VT_BSTR:
                    {
                        auto str_representation = aux_functions::ToWStringFromConstChar(s_value).c_str();
                        current_v = _variant_t(str_representation);
                        break;
                    }

                    case VARENUM::VT_I4:
                        current_v = _variant_t(atoi(s_value));
                        break;
                    case VARENUM::VT_R8:
                        current_v = _variant_t(atof(s_value), VARENUM::VT_R8);
                        break;
                    }
                    DynPropertiesManager::SetPropertyValue(&drawing_object_id,
                        &represented_guid, &_variant_t(current_v));
                }
            }
        }
    }
}
//////////////////////////////////////////////////////////////////////////////////////
/*Для сохранения свойств в файл*/
//////////////////////////////////////////////////////////////////////////////////////

void DynPropertiesManager::SavePropertiesAndValueToFile() 
{
    auto save_path = aux_functions::GetTempSavePath();
    std::ofstream out;
    out.open(save_path);
    if (out.is_open())
    {
        /*metadata*/
        out << "**metadata" << std::endl;

        AcApDocument* doc_model = acDocManager->curDocument();
        const NCHAR* project_path = doc_model->fileName();

        out << "project_path=" << aux_functions::ToStringFromWString(project_path, ru_loc).c_str() << std::endl;

        /*properties_info*/
        out << "**properties_info" << std::endl;
        std::map<std::string, VARTYPE> props2types;
        for (auto s_dyn_property : dyn_s_props)
        {
            std::vector<std::string> classes_names;
            for (auto o_class : s_dyn_property->p_class_names) { classes_names.push_back(aux_functions::ToStringFromBSTR(o_class)); }
            std::string j_classes_names;
            if (!s_dyn_property->p_class_names.empty()) j_classes_names = aux_functions::ToJoinedStringFromVectorString(classes_names, ';');
            else j_classes_names = "";

            out << "name=" << aux_functions::ToStringFromBSTR(s_dyn_property->p_name).c_str() << ";"
                << "description=" << aux_functions::ToStringFromBSTR(s_dyn_property->p_description).c_str() << ";"
                << "type=" << s_dyn_property->p_valueType << ";"
                << "category=" << aux_functions::ToStringFromBSTR(s_dyn_property->p_CatName).c_str() << ";"
                << "id=" << aux_functions::ToStringFromGuid(s_dyn_property->p_guid).c_str() << ";"
                << "to_classes=" << j_classes_names.c_str() << std::endl;
            props2types.insert({ aux_functions::ToStringFromGuid(s_dyn_property->p_guid), s_dyn_property->p_valueType });
        }
        /*values of objects*/
        out << "**properties_values" << std::endl;

        for (auto o_info : objects2properties) {
            NcDbHandle handle = o_info.first.handle();
            NCHAR buffer[32];
            handle.getIntoAsciiBuffer(buffer);
            std::string s_buffer = aux_functions::ToStringFromWString(buffer, en_loc);

            out << "*handle=" << s_buffer.c_str() << std::endl;

            for (auto o_info_value : o_info.second)
            {
                std::string current_guid = aux_functions::ToStringFromGuid(o_info_value.first);
                VARTYPE prop_type = props2types[current_guid];
                out << "id=" << current_guid.c_str() << ";value=";

                switch (prop_type) {
                case VT_I4:
                    out << o_info_value.second.intVal;
                    break;
                case VT_R8:
                    out << o_info_value.second.fltVal;
                    break;
                case VT_BSTR:
                    out << aux_functions::ToStringFromBSTR(o_info_value.second.bstrVal).c_str();
                    break;
                }
                out << std::endl << "**end" << std::endl;
            }
        }
    }
    out.close();
}